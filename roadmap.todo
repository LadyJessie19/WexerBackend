Arnia Third Module Project - Wexer Psi Backend
Project Specifications ⬇

! ATTENTION! This file was designed before the project initiation. Changes may appear from the original file to the delivering project.

🟣Good fortune for you!🟣
First - Beginning:
    Github:
        ☐ init github repository;
        ☐ Create staging branch;
        ☐ TODO: Each roadmap section is a branch;
        ☐ TODO: Each chore is a commit;
    Node.js:
        ☐ Init node project;
        ☐ Install libs:
            ☐ Express;
            ☐ Mongoose;
            ☐ Typescript;
            ☐ Dotenv;
            ☐ Yup;
            ☐ Jest;
            ☐ Bcrypt;
            ☐ Jsonwebtoken;
            ☐ ts-node-dev;
            ☐ multer;
        ☐ Install types - TODO: search them all!
        ☐ tsconfig - TODO: I dont know how to do this one...
        ☐ Config `npm run dev`("dev": "tsnd src/server.ts");
        ☐ Config Eviroment Variables;
        ☐ Create a collection in Insomnia;
    Express.js:
        ☐ Create server.ts file at src project folder;
        ☐ Initialize express server;
    MongoDB | Mongoose:
        ☐ Set MongoDB URL at .dotenv file;
        ☐ Create a database folder and a config.ts file;
        ☐ Initialize database connection;
Second - Folders Build In | Entities Sketches:
    Folders:
        ☐ root(dotenv | package.json | tsconfig | gitignore | node_modules | uploads)
            ☐ src(app | database | routes | server.ts file | utils | middlewares)
    App Folder:
        ☐ Auth(con|dtos|schemas|ser|module); 
        Note: the rep ser dependencie is Doctor Rep.
        ☐ User|Doctor:(con|dtos|entities|factorie|mapper|rep|schema|service|module)
        ☐ Patient;(con|dtos|entities|rep|schemas|services)
        ☐ Timeline;(con|dtos|entities|rep|schemas|services)
        Note: timeline is a child entity of Patient.
        ☐ Occurrence;(con|dtos|entities|rep|schemas|services)
        ☐ Evaluation;(con|dtos|entities|rep|schemas|services)
Third - Middlewares | Models | Interfaces | DTOs:
    Middlewares:
        ☐ Auth check middleware;
        ☐ Upload File middleware;
    Functions:
        ☐ Return error function;
    Entities Models:
        ☐ Yup Validator Schema on Controller;
        ☐ Mongoose Schema and Model;
        ☐ DTO to "layers chating";
        TODO: find a better definition term.
        ☐ Don't forget the module;
    Counter:
        ☐ Auth;
        ☐ Doctor;
        ☐ Patient;
        ☐ Timeline;
        ☐ Occurrence;
        ☐ Evaluation;
Fourth - Layers | Routes:
    Sewing Layers:
        ☐ / routes -> (http-req | middleware | controller dependency)
        ☐ -> controller -> (yup validator | return res | service dependency)
        ☐ -> service -> (all the logic | mess layer | rep dependency)
        ☐ -> repository \ (mongoose functions | populate | model dependency)
    Counter:
        ☐ Auth;
        ☐ Doctor;
        ☐ Patient;
        ☐ Timeline;
        ☐ Occurrence;
        ☐ Evaluation;
Fifth - Functionalities:
    Functions:
        ☐ create;
        ☐ findOne;
        ☐ findAll;
        ☐ delete;
        ☐ update;
        ☐ ...
    Counter:
        ☐ Auth;
        ☐ Doctor;
        ☐ Patient;
        ☐ Timeline;
        ☐ Occurrence;
        ☐ Evaluation;
Sixth - Relations (<- Hardest Part!):
    ☐ Who with who?
    _Add Relations bellow_:
        ☐ Doctor - Main Entity;
        ☐ Patient - Doctor's Child;
        ☐ Timeline - Patient's Child and Parent of Occurrences;
        ☐ Occurrences - Timeline's Child;
        ☐ Evaluation - Single Entity;
        Remember: Each time a entity child is created, the parent entity is updated with { parentId, {$push: childId}}
Seventh - Jest:
    Init:
        ☐ config jest
        ☐ add to script jest exec snippet;
    Testing - Controllers and Services Layers:
        ☐ First Step - Preparation;
        ☐ Second Step - Execution;
        ☐ Third Step - Expected;
        ☐ Test a sucess and if all the verifications are correct;
        ☐ There it goes. You'll got this =)
    Counter:
        Controller:
            ☐ Auth;
            ☐ Doctor;
            ☐ Patient;
            ☐ Timeline;
            ☐ Occurrence;
            ☐ Evaluation;
        Service:
            ☐ Auth;
            ☐ Doctor;
            ☐ Patient;
            ☐ Timeline;
            ☐ Occurrence;
            ☐ Evaluation;

Extras_ToDos:
    ☐ Mapper;
    ☐ Clean Architecture;
    ☐ Port/Adapter;
    ☐ Arch hexagonal;
    ☐ Api_Key;
    ☐ body_parser;
    ☐ Cors
    ☐ Melhor pasta -> 03.2-http-3 -> user;
    ☐ 70% de coverage;


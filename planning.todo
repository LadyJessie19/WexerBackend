Third Module of Arnia Project - Wexer Psi Backend
Project Specifications ⬇

Class: T32022
Project Type: Patient and Medical Records Manager
Delivery Date: 07/30/23

🟣 Good luck with the project! 🟣

First - Start:
    Github:
        ✔ Initialize repository on Github; @done(23-07-04 04:51)
        ✔ Create staging branch; @done(23-07-04 04:51)
        ✔ TODO: Each planning section is a branch; @done(23-07-04 04:51)
        ✔ TODO: Each task is a commit; @done(23-07-04 04:51)
    Docs:
        ✔ Is planning ready? @done(23-07-04 04:51)
        ✔ Project documentation - start; @done(23-07-04 04:51)
        ✔ Create .env.example file; @done(23-07-04 05:10)
    Node.js:
        ✔ Initialize Node project; @done(23-07-04 16:44)
        ✔ Install libraries: @done(23-07-04 21:43)
            ✔ Express; @done(23-07-04 16:45)
            ✔ Mongoose; @done(23-07-04 16:45)
            ✔ Typescript; @done(23-07-04 16:45)
            ✔ Dotenv; @done(23-07-04 16:45)
            ✔ Yup; @done(23-07-04 21:43)
            ✔ Jest; @done(23-07-04 21:43)
            ✔ Bcrypt; @done(23-07-04 21:43)
            ✔ Jsonwebtoken; @done(23-07-04 21:43)
            ✔ ts-node-dev; @done(23-07-04 16:46)
            ✔ multer; @done(23-07-04 21:43)
        ✔ Install types: @done(23-07-04 21:43)
            ✔ @types/node; @done(23-07-04 16:45)
            ✔ @types/express; @done(23-07-04 16:45)
            ✔ @types/jest; @done(23-07-04 21:43)
            ✔ @types/bcrypt; @done(23-07-04 21:43)
            ✔ @types/jsonwebtoken; @done(23-07-04 21:43)
            ✔ @types/multer; @done(23-07-04 21:43)
        ✔ Configure tsconfig.json: @done(23-07-04 17:27)
        ✔ Configure `npm run dev`("dev": "tsnd src/server.ts"); @done(23-07-04 16:49)
        ✔ Configure Environment Variables; @done(23-07-04 17:27)
        ✔ Create a collection in Insomnia; @done(23-07-04 19:11)
    Express.js:
        ✔ Create server.ts file in the src folder of the project; @done(23-07-04 19:11)
        ✔ Initialize Express server; @done(23-07-04 19:11)
    MongoDB | Mongoose:
        ✔ Define MongoDB URL in the .env file; @done(23-07-04 21:45)
        ✔ Create a database folder and a config.ts file; @done(23-07-04 21:47) 
        obs: It's db.ts the database config file.
        update(2023-07-10): I'm deleting this folder and putting the mongo connection at configs/databaseConfig.ts
        ✔ Initialize database connection; @done(23-07-04 21:47)
Second - Folder Creation | Entity Sketches:
    ✔ branch creation - second_folders; @done(23-07-04 23:00)
    Folders:
        ✔ root (dotenv | package.json | tsconfig | gitignore | node_modules | uploads) @done(23-07-04 23:01)
            ✔ src (app | database | routes | server.ts file | utils | middlewares) @done(23-07-04 23:02)
    App Folder:
        Legend: *these words are very long*
            con -> controllers
            ser -> services
            rep -> repositories
            ent -> entities
            fac -> factories
            mod -> module

        Note: Each task in this section is a folder. Inside the parentheses are the files in that folder.

        ✔ Auth (con|dtos|schemas|ser|mod); @done(23-07-04 23:11)
        ✔ User:(con|dtos|ent|fac|mapper|rep|schema|ser|mod) @done(23-07-05 00:06)
        ✔ Patient;(con|dtos|ent|rep|fac|schemas|ser|mod) @done(23-07-05 00:32)
        ✔ Timeline;(con|dtos|ent|rep|fac|schemas|ser|mod) @done(23-07-05 00:32)
        ✔ Occurrence;(con|dtos|ent|rep|fac|schemas|ser|mod) @done(23-07-05 00:32)
        ✔ File;(con|dtos|ent|rep|schemas|fac|ser|mod) @done(23-07-05 00:32)
    ✔ Merge branch and delete; @done(23-07-05 00:43)
Third - Middlewares | Models | Interfaces | DTOs:
    ✔ branch creation - third_middlewares; @done(23-07-05 00:46)
    Middlewares:
        ✔ Authentication verification middleware; @done(23-07-10 16:47)
        ✔ File upload middleware; @done(23-07-10 18:33)
        ✔ Create configs folder; @done(23-07-10 17:22)
        ✔ Storage Configuration File; @done(23-07-10 17:14)
    Functions:
        ✔ Error handling function; @done(23-07-10 16:48)
        ✔ encrypt data; @done(23-07-10 17:08)
        ✔ Token Verification Class; @done(23-07-10 16:28)
    Entity Modeling:
        ✔ Yup validation schema in the Controller;@done(23-07-11 17:07)
        ✔ Mongoose schema and model; @done(23-07-11 20:01)
        ✔ DTO for "inter-layer communication"; @done(23-07-11 18:26)
        ✔ Don't forget the module, which creates everything; @done(23-07-11 21:04)
        Counter:
            ✔ Auth; @done(23-07-11 21:04)
            ✔ User; @done(23-07-10 23:07)
            ✔ Patient; @done(23-07-11 21:04)
            ✔ Timeline; @done(23-07-11 21:05)
            ✔ Occurrence; @done(23-07-11 21:05)
            ✔ File; @done(23-07-11 21:05)
    ✔ Make a routes testing; @done(23-07-11 15:40)
    ✔ Read all the files to check if there is any mistakes; @done(23-07-12 16:42)
    ✔ Merge and delete branch; @done(23-07-12 16:53)
Fourth - Layers | Routes:
    ✔ create branch - fourth_layers @done(23-07-12 16:53)
    Connecting the Layers:
        ✔ /routes -> (http-req | middleware | controller dependency) @done(23-07-12 19:51)
        ✔ -> controller -> (yup validation | response return | service dependency) @done(23-07-12 20:33)
        ✔ -> service -> (all logic | error layer | repository dependency) @done(23-07-12 21:45)
        ✔ -> repository \ (mongoose functions | populate | model dependency) @done(23-07-12 22:20)
    Counter:
        ✔ Auth; @done(23-07-12 21:59)
        ✔ User; @done(23-07-10 23:07)
        ✔ Patient; @done(23-07-12 22:20)
        ✔ Timeline; @done(23-07-12 22:20)
        ✔ Occurrence; @done(23-07-12 22:21)
        ✔ File; @done(23-07-12 22:21)
    ✔ Merge and delete branch; @done(23-07-12 22:49)
Fifth - Features:
    ✔ create branch - fifty_features @done(23-07-12 22:50)
    Functions:
        ✔ Create a utils function - newSuccess @done(23-07-13 20:37)
        ✔ Create a utils function - ServerError @done(23-07-13 20:37)

        ✔ Auth Routes; @done(23-07-13 23:22)
        ✔ Auth Controller; @done(23-07-13 23:22)
        ✔ Auth Service; @done(23-07-13 23:22)
        ✔ Auth uses the User repository; @done(23-07-13 23:22)
        
        ✔ Create User; @done(23-07-10 23:08)
        ✔ Rebuild create User; @done(23-07-13 23:33)
        ✔ Find User - just noting; @done(23-07-13 23:23)
        ✔ Find All Users; @done(23-07-13 23:23)
        ✔ Find by email - just noting; @done(23-07-10 23:08)

        ✔ Stoped at auth middleware; @est(2023-07-14 23:59) @done(23-07-14 15:40)
        ✔ How I know that the user is with his correct token? @done(23-07-14 15:39)
        ✘ PARAMS! forget this! @cancelled(23-07-14 15:40)

        ✔ Add pagination to GET - extra; @done(23-07-14 20:11)
        ✔ Authentication; @done(23-07-14 15:40)
        ✔ Update User; @done(23-07-14 18:53)
        ✔ Delete User; @done(23-07-14 18:53)
        ✔ pushPatient function; @done(23-07-17 20:45)

        ✔ *take a breath and keep going* @done(23-07-17 20:45)

        ✔ Create patient -> relationship with User; @done(23-07-17 20:45)
        ✔ Find patient by id; @done(23-07-17 22:58)
        ✔ Update patient; @done(23-07-17 22:58)
        ✔ Delete patient - extra; @done(23-07-17 22:58)
        
        ✔ Put the getOne User back at his place; @done(23-07-17 22:03)

        ✔ Find all patients of a User; @done(23-07-18 19:27)
        ✔ Add pagination to GET - extra; @done(23-07-18 19:27)
        ✔ PushTimeline; @done(23-07-18 19:27)

        ✔ Fazer um utils de paginação!!!! @done(23-07-20 10:09)

        ✔ *take another breath* @done(23-07-20 10:11)
        
        ✔ Create timeline -> relationship with a Patient; @done(23-07-19 00:22)
        ✔ Find all timelines of a Patient; @done(23-07-20 10:09)
        ✔ Add pagination to GET - extra; @done(23-07-20 10:09)
        ✔ Find timeline by id; @done(23-07-19 00:23)
        ✔ Update timeline; @done(23-07-19 00:23)
        ✔ Delete timeline - extra; @done(23-07-19 00:24)
        ✔ pushOccurrence @done(23-07-19 00:23)

        ✔ *now it's easier* @done(23-07-20 10:11)

        ✔ Create occurrence -> relationship with a Timeline; @done(23-07-20 14:07)
        ✔ Find all occurrences of a Timeline; @done(23-07-20 14:07)
        ✔ Add pagination to GET - extra; @done(23-07-20 14:08)
        ✔ Find occurrences by id; @done(23-07-20 14:08)
        ✔ Update occurrences; @done(23-07-20 14:08)
        ✔ Delete occurrences - extra; @done(23-07-20 14:08)
        ✔ pushFile @done(23-07-20 14:08)

        ✔ Create a file -> relationship with User and Occurrence; @done(23-07-21 22:43)
        ✘ Associate a file with a User - extra; @cancelled(23-07-21 22:43)

        ✔ Associate a file with Occurrence; @done(23-07-21 22:43)
        ✔ Find all files of an Occurrence; @done(23-07-21 22:43)
        ✔ Delete a file; @done(23-07-21 22:43)
        ✔ Build the User Mapper @done(23-07-21 22:43)
        ✘ Find all files of a Patient; @cancelled(23-07-21 22:43)
        ✘ Find all files of a User; @cancelled(23-07-21 22:43)

    Counter:
        ✔ Auth; @done(23-07-13 23:01)
        ✔ User; @done(23-07-17 23:01)
        ✔ Patient; @done(23-07-18 19:28)
        ✔ Timeline; @done(23-07-20 10:09)
        ✔ Occurrence; @done(23-07-20 14:09)
        ✔ File; @done(23-07-22 01:16)
    ✔ merge and delete the fudging branch; @done(23-07-22 01:16)
    
    _Relationships_:
        ✔ User - Main Entity, Parent of Patient and File; @done(23-07-20 10:10)
        ✔ Patient - Child of User and Parent of Timeline; @done(23-07-20 10:10)
        ✔ Timeline - Child of Patient and Parent of Occurrences; @done(23-07-20 10:10)
        ✔ Occurrences - Child of Timeline and Parent of File; @done(23-07-20 14:19)
        ✔ File - Child of User and Occurrences; @done(23-07-21 22:43)

Sixth - Finalizations:
    ✔ File Middleware; @done(23-07-21 22:43)
    ✔ Consertar as paginações; @done(23-07-20 10:09)
    ✔ Query através de params? Seria maneiro! @done(23-07-20 10:10)
    ✔ Ver a melhor forma de usar o middleware de auth @done(23-07-21 22:43)
    ✔ Clean this .todo!!! It's so messy! @done(23-07-21 22:43)
    ✔ One full test to all the entities and layers @done(23-07-22 01:39)
    ✘ Eu devo fazer "getOneFromParent" na entidade file? @cancelled(23-07-21 22:43)
    
    ✔ create branch - sixth_finalizations @done(23-07-27 20:56)

    ✔ The message getOnePsychologist is missing "was"; @done(23-07-27 20:56)
    ✔ The update function needs to be fixed; @done(23-07-28 00:03)

    ✔ Perguntar: @done(23-07-27 20:21)
        ✔ Tipagem do teste - babel @done(23-07-27 20:01)
        ✔ Teste ok? @done(23-07-27 20:21)
        ✔ Delete trycatch; @done(23-07-27 20:21)
        ✔ coverage: porcentagem? @done(23-07-27 20:21)

    Quick_Tasks:
        ✔ Padrão REST - revisar a entidade User; @done(23-07-28 03:09)
        ✔ trocars os "user" por "result"; @done(23-07-28 03:09)
        ✘ Fazer um método para aparecer o link da foto quando o usuário for buscado. @cancelled(23-07-28 03:04)
        ✔ Remover tudo sobre file da entidade user. @done(23-07-28 03:15)
        
    Every_Entities_Tasks:
        ✔ Revisar os códigos das requisições; @done(23-07-28 03:20)
        ✔ Consertar as validações das rotas get, update e delete. @done(23-07-28 00:48)
        ✔ As rotas de update precisam ser melhoradas. Yup sem nada obrigatório. @done(23-07-28 00:24)
        ✔ Erro de delete - id de outra coleção - msg de sucesso; @done(23-07-28 00:24)
            
    Larger_Tasks:
        ✘ Profile picture - extra; @cancelled(23-07-28 03:09)
        ✔ Como remover o id da entidade pai quando ele for deletado? @done(23-07-28 02:42)
        
    Professor_Help:
        ✘ Tentar consertar a tipagem do FileMapper: droga de any! @cancelled(23-07-26 22:20)
        ☐ Consertar o @types da tipagem de Request - AuthMiddleware
        
    Last_Tasks:
        ✔ tsconfig.json @done(23-07-28 03:41)
        ✔ Configurar babel; @done(23-07-28 03:41)
        ✔ Factory pattern; @done(23-07-28 04:23)
        ✔ Consertar as tipagens dos schemas @done(23-07-28 03:48)
        ✔ Fazer o merge com a main e testar o deploy @done(23-07-28 05:55)
        ✘ Consertar o lugar onde fazer o express.static; @cancelled(23-07-28 16:55)
        ✘ Fazer um método para aparecer o link da foto quando a ocorrência for buscada. @cancelled(23-07-28 05:33)
        ✘ O link para o file não está funcionando. BUAAAA! @cancelled(23-07-28 05:33)
        ✘ Consertar os dtos de create nas features @cancelled(23-07-28 03:53)

    ✔ merge and delete... you know! @done(23-07-28 05:55)
Seventh - Jest:
    ✔ create branch - seventh_tests @done(23-07-26 18:52)
    Initialization:
        ✔ Configure jest; @done(23-07-26 22:19)
        ✔ Config babel - watch the july, 7th video; @done(23-07-28 03:22)
        ✔ Add jest execution snippet to the script; @done(23-07-26 22:19)
    Testing - Services Layers:
    Counter:
        Service:
            ✘ Auth; @cancelled(23-07-28 06:02)
            ☐ User;
            ☐ Patient;
            ☐ Timeline;
            ☐ Occurrence;
        Supertest:
            ✘ Integration test on a user route with supertest; @cancelled(23-07-28 03:24)
Eighth - Finalization:
    Deploy:
        ✔ Railway account; @done(23-07-26 22:20)
        ✔ Set all the env var; @done(23-07-26 22:20)
        ✔ Deploy the project; @done(23-07-26 22:20)
        ✔ Test all the requisitions - the server is Railway(I think...); @done(23-07-26 22:20)
    Documentation:
        ☐ Finish documentation;
            ✘ Explain the declare global at MainRouter; @cancelled(23-07-28 03:24)
            ✘ Explicar o any da função de paginação! @cancelled(23-07-28 03:24)
Final_ToDos:
    ✔ Conta do railaway vai parar de funfar; @done(23-07-28 15:44)
    ☐ Tests - 5 tests;
    ☐ Finish documentation;
    ✔ Post at Arnia's gdrive the project; @done(23-07-28 16:44)
    ☐ Fix user entity nickname
    ☐ Email and nickname are unique and required
    ☐ Hasta La Vista, Baby!

Extras_ToDo:
    ✔ Clean Architecture; @done(23-07-21 22:45)
    ✔ Port/Adapter; @done(23-07-21 22:45)
    ✔ Hexagonal Architecture; @done(23-07-21 22:44)
    ✔ Better folder structure -> 03.2-http-3 -> user; @done(23-07-21 22:45)
    ✔ Mapper - link to files; @done(23-07-21 22:44)
    ✔ Pagination; @done(23-07-17 20:44)
    ✔ Request typing -> use the revision exercise; @done(23-07-21 22:44)
    ✘ Soft Delete; @cancelled(23-07-21 22:44)
